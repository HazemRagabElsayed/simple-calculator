
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000008d6  0000096a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  0000097a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e88  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c1  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000565  00000000  00000000  00001e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031a  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a56  00000000  00000000  0000288e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000032e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 91 01 	call	0x322	; 0x322 <main>
  8a:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "DIO.h"
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	19 f1       	breq	.+70     	; 0xdc <DIO_vsetPINDir+0x4a>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_vsetPINDir+0xc>
  98:	81 34       	cpi	r24, 0x41	; 65
  9a:	39 f0       	breq	.+14     	; 0xaa <DIO_vsetPINDir+0x18>
  9c:	08 95       	ret
  9e:	83 34       	cpi	r24, 0x43	; 67
  a0:	b1 f1       	breq	.+108    	; 0x10e <DIO_vsetPINDir+0x7c>
  a2:	84 34       	cpi	r24, 0x44	; 68
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	4c c0       	rjmp	.+152    	; 0x140 <DIO_vsetPINDir+0xae>
  a8:	08 95       	ret
	{
		
		
		case 'A':
		if(direction==1)
  aa:	41 30       	cpi	r20, 0x01	; 1
  ac:	59 f4       	brne	.+22     	; 0xc4 <DIO_vsetPINDir+0x32>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  ae:	2a b3       	in	r18, 0x1a	; 26
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_vsetPINDir+0x28>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_vsetPINDir+0x24>
  be:	82 2b       	or	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
  c4:	2a b3       	in	r18, 0x1a	; 26
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_vsetPINDir+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_vsetPINDir+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
  dc:	41 30       	cpi	r20, 0x01	; 1
  de:	59 f4       	brne	.+22     	; 0xf6 <DIO_vsetPINDir+0x64>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_vsetPINDir+0x5a>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_vsetPINDir+0x56>
  f0:	82 2b       	or	r24, r18
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
  f6:	27 b3       	in	r18, 0x17	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_vsetPINDir+0x70>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_vsetPINDir+0x6c>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	87 bb       	out	0x17, r24	; 23
 10c:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <DIO_vsetPINDir+0x96>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 112:	24 b3       	in	r18, 0x14	; 20
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_vsetPINDir+0x8c>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_vsetPINDir+0x88>
 122:	82 2b       	or	r24, r18
 124:	84 bb       	out	0x14, r24	; 20
 126:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_vsetPINDir+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_vsetPINDir+0x9e>
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	59 f4       	brne	.+22     	; 0x15a <DIO_vsetPINDir+0xc8>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_vsetPINDir+0xd4>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_vsetPINDir+0xd0>
 16a:	80 95       	com	r24
 16c:	82 23       	and	r24, r18
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	19 f1       	breq	.+70     	; 0x1bc <DIO_write+0x4a>
 176:	18 f4       	brcc	.+6      	; 0x17e <DIO_write+0xc>
 178:	81 34       	cpi	r24, 0x41	; 65
 17a:	39 f0       	breq	.+14     	; 0x18a <DIO_write+0x18>
 17c:	08 95       	ret
 17e:	83 34       	cpi	r24, 0x43	; 67
 180:	b1 f1       	breq	.+108    	; 0x1ee <DIO_write+0x7c>
 182:	84 34       	cpi	r24, 0x44	; 68
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_write+0x16>
 186:	4c c0       	rjmp	.+152    	; 0x220 <DIO_write+0xae>
 188:	08 95       	ret
	{
		case 'A' :
		
		if(outputvalue==1)
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <DIO_write+0x32>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_write+0x28>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_write+0x24>
 19e:	82 2b       	or	r24, r18
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 1a4:	2b b3       	in	r18, 0x1b	; 27
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_write+0x3e>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_write+0x3a>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_write+0x64>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 1c0:	28 b3       	in	r18, 0x18	; 24
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x5a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x56>
 1d0:	82 2b       	or	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x70>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x6c>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x96>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x8c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x88>
 202:	82 2b       	or	r24, r18
 204:	85 bb       	out	0x15, r24	; 21
 206:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x9e>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_write+0xc8>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_write+0xbe>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_write+0xba>
 234:	82 2b       	or	r24, r18
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 23a:	22 b3       	in	r18, 0x12	; 18
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_write+0xd4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_write+0xd0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 252:	82 34       	cpi	r24, 0x42	; 66
 254:	d9 f0       	breq	.+54     	; 0x28c <DIO_u8read+0x3a>
 256:	18 f4       	brcc	.+6      	; 0x25e <DIO_u8read+0xc>
 258:	81 34       	cpi	r24, 0x41	; 65
 25a:	31 f0       	breq	.+12     	; 0x268 <DIO_u8read+0x16>
 25c:	4d c0       	rjmp	.+154    	; 0x2f8 <DIO_u8read+0xa6>
 25e:	83 34       	cpi	r24, 0x43	; 67
 260:	39 f1       	breq	.+78     	; 0x2b0 <DIO_u8read+0x5e>
 262:	84 34       	cpi	r24, 0x44	; 68
 264:	b9 f1       	breq	.+110    	; 0x2d4 <DIO_u8read+0x82>
 266:	48 c0       	rjmp	.+144    	; 0x2f8 <DIO_u8read+0xa6>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 268:	29 b3       	in	r18, 0x19	; 25
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	06 2e       	mov	r0, r22
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_u8read+0x24>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	0a 94       	dec	r0
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_u8read+0x20>
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	82 23       	and	r24, r18
 27e:	93 23       	and	r25, r19
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_u8read+0x34>
 282:	95 95       	asr	r25
 284:	87 95       	ror	r24
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_u8read+0x30>
		break;
 28a:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 28c:	26 b3       	in	r18, 0x16	; 22
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	06 2e       	mov	r0, r22
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_u8read+0x48>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_u8read+0x44>
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	82 23       	and	r24, r18
 2a2:	93 23       	and	r25, r19
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_u8read+0x58>
 2a6:	95 95       	asr	r25
 2a8:	87 95       	ror	r24
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_u8read+0x54>
		break;
 2ae:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 2b0:	23 b3       	in	r18, 0x13	; 19
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	06 2e       	mov	r0, r22
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_u8read+0x6c>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_u8read+0x68>
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	82 23       	and	r24, r18
 2c6:	93 23       	and	r25, r19
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_u8read+0x7c>
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_u8read+0x78>
		break;
 2d2:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 2d4:	20 b3       	in	r18, 0x10	; 16
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	06 2e       	mov	r0, r22
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_u8read+0x90>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_u8read+0x8c>
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	82 23       	and	r24, r18
 2ea:	93 23       	and	r25, r19
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_u8read+0xa0>
 2ee:	95 95       	asr	r25
 2f0:	87 95       	ror	r24
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_u8read+0x9c>
		break;
 2f6:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 2f8:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 2fa:	08 95       	ret

000002fc <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 2fc:	82 34       	cpi	r24, 0x42	; 66
 2fe:	59 f0       	breq	.+22     	; 0x316 <DIO_write_port+0x1a>
 300:	18 f4       	brcc	.+6      	; 0x308 <DIO_write_port+0xc>
 302:	81 34       	cpi	r24, 0x41	; 65
 304:	31 f0       	breq	.+12     	; 0x312 <DIO_write_port+0x16>
 306:	08 95       	ret
 308:	83 34       	cpi	r24, 0x43	; 67
 30a:	39 f0       	breq	.+14     	; 0x31a <DIO_write_port+0x1e>
 30c:	84 34       	cpi	r24, 0x44	; 68
 30e:	39 f0       	breq	.+14     	; 0x31e <DIO_write_port+0x22>
 310:	08 95       	ret
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 312:	6b bb       	out	0x1b, r22	; 27
		break ;
 314:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 316:	68 bb       	out	0x18, r22	; 24
		break ;
 318:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 31a:	65 bb       	out	0x15, r22	; 21
		break ;
 31c:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 31e:	62 bb       	out	0x12, r22	; 18
 320:	08 95       	ret

00000322 <main>:
#include "Keypad_driver.h"
#define F_CPU 8000000UL
#include"util/delay.h"
char input;
int main(void)
{
 322:	2f 92       	push	r2
 324:	3f 92       	push	r3
 326:	4f 92       	push	r4
 328:	5f 92       	push	r5
 32a:	6f 92       	push	r6
 32c:	7f 92       	push	r7
 32e:	8f 92       	push	r8
 330:	9f 92       	push	r9
 332:	af 92       	push	r10
 334:	bf 92       	push	r11
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
	char number1,number2,modifier,flag,operation;
	long int result;
	location1 : LCD_init();
	keypad_init('C');
	LCD_send_cmd(CLRSCREEN);
 346:	ff 24       	eor	r15, r15
 348:	f3 94       	inc	r15
	_delay_ms(10);
	
	number1=0,number2=0,modifier = 10,flag=0,operation = 't';
	input =NOTPRESSED;
 34a:	ee 24       	eor	r14, r14
 34c:	ea 94       	dec	r14
	location1 : LCD_init();
	keypad_init('C');
	LCD_send_cmd(CLRSCREEN);
	_delay_ms(10);
	
	number1=0,number2=0,modifier = 10,flag=0,operation = 't';
 34e:	0f 2e       	mov	r0, r31
 350:	f4 e7       	ldi	r31, 0x74	; 116
 352:	cf 2e       	mov	r12, r31
 354:	f0 2d       	mov	r31, r0
 356:	71 2c       	mov	r7, r1
 358:	0f 2e       	mov	r0, r31
 35a:	fa e0       	ldi	r31, 0x0A	; 10
 35c:	df 2e       	mov	r13, r31
 35e:	f0 2d       	mov	r31, r0
				  }
				  else
				  {
					  number2 = number2 +(input-48)*modifier;
				  }
				  modifier = modifier/10;
 360:	1d ec       	ldi	r17, 0xCD	; 205
			  }
		    else if (input == '+' || input == '-' || input == '*' || input == '/')
			{
				operation = input;
				modifier = 10;
				flag = 1;
 362:	df 2d       	mov	r29, r15
				  modifier = modifier/10;
			  }
		    else if (input == '+' || input == '-' || input == '*' || input == '/')
			{
				operation = input;
				modifier = 10;
 364:	2d 2c       	mov	r2, r13
	LCD_send_cmd(CLRSCREEN);
	_delay_ms(10);
	
	number1=0,number2=0,modifier = 10,flag=0,operation = 't';
	input =NOTPRESSED;
	result =0;
 366:	61 2c       	mov	r6, r1
 368:	51 2c       	mov	r5, r1
 36a:	41 2c       	mov	r4, r1
 36c:	31 2c       	mov	r3, r1
char input;
int main(void)
{
	char number1,number2,modifier,flag,operation;
	long int result;
	location1 : LCD_init();
 36e:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_init>
	keypad_init('C');
 372:	83 e4       	ldi	r24, 0x43	; 67
 374:	0e 94 e7 02 	call	0x5ce	; 0x5ce <keypad_init>
	LCD_send_cmd(CLRSCREEN);
 378:	8f 2d       	mov	r24, r15
 37a:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_send_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37e:	8f e1       	ldi	r24, 0x1F	; 31
 380:	9e e4       	ldi	r25, 0x4E	; 78
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <main+0x60>
 386:	00 c0       	rjmp	.+0      	; 0x388 <main+0x66>
 388:	00 00       	nop
	_delay_ms(10);
	
	number1=0,number2=0,modifier = 10,flag=0,operation = 't';
	input =NOTPRESSED;
 38a:	e0 92 70 00 	sts	0x0070, r14
	location1 : LCD_init();
	keypad_init('C');
	LCD_send_cmd(CLRSCREEN);
	_delay_ms(10);
	
	number1=0,number2=0,modifier = 10,flag=0,operation = 't';
 38e:	bc 2c       	mov	r11, r12
 390:	07 2d       	mov	r16, r7
 392:	cd 2d       	mov	r28, r13
 394:	a7 2c       	mov	r10, r7
 396:	97 2c       	mov	r9, r7
	result =0;
	while(1)
    {

			do{
			input = keypad_read('C');
 398:	83 e4       	ldi	r24, 0x43	; 67
 39a:	0e 94 26 03 	call	0x64c	; 0x64c <keypad_read>
 39e:	80 93 70 00 	sts	0x0070, r24
			 }while(input == NOTPRESSED);
 3a2:	8f 3f       	cpi	r24, 0xFF	; 255
 3a4:	c9 f3       	breq	.-14     	; 0x398 <main+0x76>
			LCD_send_char(input);
 3a6:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_send_char>
		    if(input != '+' && input != '-' && input != '*' && input != '/'  )
 3aa:	80 91 70 00 	lds	r24, 0x0070
 3ae:	98 2f       	mov	r25, r24
 3b0:	9d 7f       	andi	r25, 0xFD	; 253
 3b2:	9d 32       	cpi	r25, 0x2D	; 45
 3b4:	b1 f0       	breq	.+44     	; 0x3e2 <main+0xc0>
 3b6:	96 ed       	ldi	r25, 0xD6	; 214
 3b8:	98 0f       	add	r25, r24
 3ba:	92 30       	cpi	r25, 0x02	; 2
 3bc:	b0 f0       	brcs	.+44     	; 0x3ea <main+0xc8>
			  {
				  if(0 == flag)
 3be:	01 11       	cpse	r16, r1
 3c0:	05 c0       	rjmp	.+10     	; 0x3cc <main+0xaa>
				  {
					  number1 = number1+(input-48)*modifier;
 3c2:	80 53       	subi	r24, 0x30	; 48
 3c4:	8c 9f       	mul	r24, r28
 3c6:	90 0c       	add	r9, r0
 3c8:	11 24       	eor	r1, r1
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <main+0xb2>
				  }
				  else
				  {
					  number2 = number2 +(input-48)*modifier;
 3cc:	80 53       	subi	r24, 0x30	; 48
 3ce:	8c 9f       	mul	r24, r28
 3d0:	a0 0c       	add	r10, r0
 3d2:	11 24       	eor	r1, r1
				  }
				  modifier = modifier/10;
 3d4:	c1 9f       	mul	r28, r17
 3d6:	c1 2d       	mov	r28, r1
 3d8:	11 24       	eor	r1, r1
 3da:	c6 95       	lsr	r28
 3dc:	c6 95       	lsr	r28
 3de:	c6 95       	lsr	r28
 3e0:	07 c0       	rjmp	.+14     	; 0x3f0 <main+0xce>
			  }
		    else if (input == '+' || input == '-' || input == '*' || input == '/')
			{
				operation = input;
 3e2:	b8 2e       	mov	r11, r24
				modifier = 10;
				flag = 1;
 3e4:	0d 2f       	mov	r16, r29
				  modifier = modifier/10;
			  }
		    else if (input == '+' || input == '-' || input == '*' || input == '/')
			{
				operation = input;
				modifier = 10;
 3e6:	c2 2d       	mov	r28, r2
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <main+0xce>
				  }
				  modifier = modifier/10;
			  }
		    else if (input == '+' || input == '-' || input == '*' || input == '/')
			{
				operation = input;
 3ea:	b8 2e       	mov	r11, r24
				modifier = 10;
				flag = 1;
 3ec:	0d 2f       	mov	r16, r29
				  modifier = modifier/10;
			  }
		    else if (input == '+' || input == '-' || input == '*' || input == '/')
			{
				operation = input;
				modifier = 10;
 3ee:	c2 2d       	mov	r28, r2
 3f0:	9f ef       	ldi	r25, 0xFF	; 255
 3f2:	22 e5       	ldi	r18, 0x52	; 82
 3f4:	87 e0       	ldi	r24, 0x07	; 7
 3f6:	91 50       	subi	r25, 0x01	; 1
 3f8:	20 40       	sbci	r18, 0x00	; 0
 3fa:	80 40       	sbci	r24, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0xd4>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <main+0xde>
 400:	00 00       	nop
				flag = 1;
			}
			_delay_ms(300);
			if (input == '=')
 402:	80 91 70 00 	lds	r24, 0x0070
 406:	8d 33       	cpi	r24, 0x3D	; 61
 408:	39 f6       	brne	.-114    	; 0x398 <main+0x76>
			{
				break;
			}
				}
			
			if (operation == '+')
 40a:	9b e2       	ldi	r25, 0x2B	; 43
 40c:	b9 12       	cpse	r11, r25
 40e:	09 c0       	rjmp	.+18     	; 0x422 <main+0x100>
			{
				result = number1+number2;
 410:	6a 2d       	mov	r22, r10
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	69 0d       	add	r22, r9
 416:	71 1d       	adc	r23, r1
 418:	07 2e       	mov	r0, r23
 41a:	00 0c       	add	r0, r0
 41c:	88 0b       	sbc	r24, r24
 41e:	99 0b       	sbc	r25, r25
 420:	22 c0       	rjmp	.+68     	; 0x466 <main+0x144>
			}
			else if (operation == '-')
 422:	2d e2       	ldi	r18, 0x2D	; 45
 424:	b2 12       	cpse	r11, r18
 426:	09 c0       	rjmp	.+18     	; 0x43a <main+0x118>
			{
				result = number1 - number2;
 428:	69 2d       	mov	r22, r9
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	6a 19       	sub	r22, r10
 42e:	71 09       	sbc	r23, r1
 430:	07 2e       	mov	r0, r23
 432:	00 0c       	add	r0, r0
 434:	88 0b       	sbc	r24, r24
 436:	99 0b       	sbc	r25, r25
 438:	16 c0       	rjmp	.+44     	; 0x466 <main+0x144>
			}
			else if (operation == '*')
 43a:	8a e2       	ldi	r24, 0x2A	; 42
 43c:	b8 12       	cpse	r11, r24
 43e:	08 c0       	rjmp	.+16     	; 0x450 <main+0x12e>
			{
				result = number1 * number2;
 440:	9a 9c       	mul	r9, r10
 442:	b0 01       	movw	r22, r0
 444:	11 24       	eor	r1, r1
 446:	07 2e       	mov	r0, r23
 448:	00 0c       	add	r0, r0
 44a:	88 0b       	sbc	r24, r24
 44c:	99 0b       	sbc	r25, r25
 44e:	0b c0       	rjmp	.+22     	; 0x466 <main+0x144>
			}
			else if (operation == '/')
 450:	9f e2       	ldi	r25, 0x2F	; 47
 452:	b9 12       	cpse	r11, r25
 454:	9f c0       	rjmp	.+318    	; 0x594 <main+0x272>
			{
				result = number1 / number2;
 456:	89 2d       	mov	r24, r9
 458:	6a 2d       	mov	r22, r10
 45a:	0e 94 1c 04 	call	0x838	; 0x838 <__udivmodqi4>
 45e:	68 2f       	mov	r22, r24
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
			}
			if(result<10 && 1 == flag)
 466:	6a 30       	cpi	r22, 0x0A	; 10
 468:	71 05       	cpc	r23, r1
 46a:	81 05       	cpc	r24, r1
 46c:	91 05       	cpc	r25, r1
 46e:	4c f4       	brge	.+18     	; 0x482 <main+0x160>
 470:	01 30       	cpi	r16, 0x01	; 1
 472:	f1 f4       	brne	.+60     	; 0x4b0 <main+0x18e>
 474:	01 c0       	rjmp	.+2      	; 0x478 <main+0x156>
	LCD_send_cmd(CLRSCREEN);
	_delay_ms(10);
	
	number1=0,number2=0,modifier = 10,flag=0,operation = 't';
	input =NOTPRESSED;
	result =0;
 476:	66 2d       	mov	r22, r6
			{
				result = number1 / number2;
			}
			if(result<10 && 1 == flag)
			{
				LCD_send_char(result+48);
 478:	80 e3       	ldi	r24, 0x30	; 48
 47a:	86 0f       	add	r24, r22
 47c:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_send_char>
 480:	71 c0       	rjmp	.+226    	; 0x564 <main+0x242>
			}
			else if (result<100 && 1 == flag)
 482:	64 36       	cpi	r22, 0x64	; 100
 484:	71 05       	cpc	r23, r1
 486:	81 05       	cpc	r24, r1
 488:	91 05       	cpc	r25, r1
 48a:	94 f4       	brge	.+36     	; 0x4b0 <main+0x18e>
 48c:	01 30       	cpi	r16, 0x01	; 1
 48e:	b9 f5       	brne	.+110    	; 0x4fe <main+0x1dc>
			{
				LCD_send_char(result/10+48);
 490:	2a e0       	ldi	r18, 0x0A	; 10
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	0e 94 28 04 	call	0x850	; 0x850 <__divmodsi4>
 49c:	c6 2f       	mov	r28, r22
 49e:	80 e3       	ldi	r24, 0x30	; 48
 4a0:	82 0f       	add	r24, r18
 4a2:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_send_char>
				LCD_send_char(result%10+48);
 4a6:	80 e3       	ldi	r24, 0x30	; 48
 4a8:	8c 0f       	add	r24, r28
 4aa:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_send_char>
 4ae:	5a c0       	rjmp	.+180    	; 0x564 <main+0x242>
				
			}
			else if (result<1000 && 1 == flag)
 4b0:	68 3e       	cpi	r22, 0xE8	; 232
 4b2:	23 e0       	ldi	r18, 0x03	; 3
 4b4:	72 07       	cpc	r23, r18
 4b6:	81 05       	cpc	r24, r1
 4b8:	91 05       	cpc	r25, r1
 4ba:	0c f5       	brge	.+66     	; 0x4fe <main+0x1dc>
 4bc:	01 30       	cpi	r16, 0x01	; 1
 4be:	09 f0       	breq	.+2      	; 0x4c2 <main+0x1a0>
 4c0:	51 c0       	rjmp	.+162    	; 0x564 <main+0x242>
			{
				LCD_send_char(result/100 + 48);
 4c2:	24 e6       	ldi	r18, 0x64	; 100
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	0e 94 28 04 	call	0x850	; 0x850 <__divmodsi4>
 4ce:	4b 01       	movw	r8, r22
 4d0:	5c 01       	movw	r10, r24
 4d2:	80 e3       	ldi	r24, 0x30	; 48
 4d4:	82 0f       	add	r24, r18
 4d6:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_send_char>
				LCD_send_char((result%100)/10 + 48);
 4da:	c5 01       	movw	r24, r10
 4dc:	b4 01       	movw	r22, r8
 4de:	2a e0       	ldi	r18, 0x0A	; 10
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	40 e0       	ldi	r20, 0x00	; 0
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	0e 94 28 04 	call	0x850	; 0x850 <__divmodsi4>
 4ea:	c6 2f       	mov	r28, r22
 4ec:	80 e3       	ldi	r24, 0x30	; 48
 4ee:	82 0f       	add	r24, r18
 4f0:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_send_char>
				LCD_send_char((result%100)%10+48);
 4f4:	80 e3       	ldi	r24, 0x30	; 48
 4f6:	8c 0f       	add	r24, r28
 4f8:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_send_char>
 4fc:	33 c0       	rjmp	.+102    	; 0x564 <main+0x242>
				
				
			}
			else if(result <10000 && 1 == flag)
 4fe:	60 31       	cpi	r22, 0x10	; 16
 500:	27 e2       	ldi	r18, 0x27	; 39
 502:	72 07       	cpc	r23, r18
 504:	81 05       	cpc	r24, r1
 506:	91 05       	cpc	r25, r1
 508:	6c f5       	brge	.+90     	; 0x564 <main+0x242>
 50a:	01 30       	cpi	r16, 0x01	; 1
 50c:	59 f5       	brne	.+86     	; 0x564 <main+0x242>
			{
				LCD_send_char(result/1000 + 48);
 50e:	28 ee       	ldi	r18, 0xE8	; 232
 510:	33 e0       	ldi	r19, 0x03	; 3
 512:	40 e0       	ldi	r20, 0x00	; 0
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	0e 94 28 04 	call	0x850	; 0x850 <__divmodsi4>
 51a:	4b 01       	movw	r8, r22
 51c:	5c 01       	movw	r10, r24
 51e:	80 e3       	ldi	r24, 0x30	; 48
 520:	82 0f       	add	r24, r18
 522:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_send_char>
				LCD_send_char((result%1000)/100 + 48);
 526:	c5 01       	movw	r24, r10
 528:	b4 01       	movw	r22, r8
 52a:	24 e6       	ldi	r18, 0x64	; 100
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	50 e0       	ldi	r21, 0x00	; 0
 532:	0e 94 28 04 	call	0x850	; 0x850 <__divmodsi4>
 536:	4b 01       	movw	r8, r22
 538:	5c 01       	movw	r10, r24
 53a:	80 e3       	ldi	r24, 0x30	; 48
 53c:	82 0f       	add	r24, r18
 53e:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_send_char>
				LCD_send_char((result%1000)%100/10+48);
 542:	c5 01       	movw	r24, r10
 544:	b4 01       	movw	r22, r8
 546:	2a e0       	ldi	r18, 0x0A	; 10
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	40 e0       	ldi	r20, 0x00	; 0
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	0e 94 28 04 	call	0x850	; 0x850 <__divmodsi4>
 552:	c6 2f       	mov	r28, r22
 554:	80 e3       	ldi	r24, 0x30	; 48
 556:	82 0f       	add	r24, r18
 558:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_send_char>
				LCD_send_char((result%1000)% 100 %10 + 48);
 55c:	80 e3       	ldi	r24, 0x30	; 48
 55e:	8c 0f       	add	r24, r28
 560:	0e 94 0d 04 	call	0x81a	; 0x81a <LCD_send_char>
			}
			input =NOTPRESSED;
 564:	e0 92 70 00 	sts	0x0070, r14
			do{
				input =keypad_read('C');
 568:	83 e4       	ldi	r24, 0x43	; 67
 56a:	0e 94 26 03 	call	0x64c	; 0x64c <keypad_read>
 56e:	80 93 70 00 	sts	0x0070, r24
			}while(input==NOTPRESSED);
 572:	8f 3f       	cpi	r24, 0xFF	; 255
 574:	c9 f3       	breq	.-14     	; 0x568 <main+0x246>
				if (input == 'o')
 576:	8f 36       	cpi	r24, 0x6F	; 111
 578:	a9 f4       	brne	.+42     	; 0x5a4 <main+0x282>
				{
					LCD_send_cmd(CLRSCREEN);
 57a:	8f 2d       	mov	r24, r15
 57c:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_send_cmd>
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	92 e5       	ldi	r25, 0x52	; 82
 584:	27 e0       	ldi	r18, 0x07	; 7
 586:	81 50       	subi	r24, 0x01	; 1
 588:	90 40       	sbci	r25, 0x00	; 0
 58a:	20 40       	sbci	r18, 0x00	; 0
 58c:	e1 f7       	brne	.-8      	; 0x586 <main+0x264>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <main+0x26e>
 590:	00 00       	nop
 592:	ed ce       	rjmp	.-550    	; 0x36e <main+0x4c>
			}
			else if (operation == '/')
			{
				result = number1 / number2;
			}
			if(result<10 && 1 == flag)
 594:	01 30       	cpi	r16, 0x01	; 1
 596:	09 f4       	brne	.+2      	; 0x59a <main+0x278>
 598:	6e cf       	rjmp	.-292    	; 0x476 <main+0x154>
	LCD_send_cmd(CLRSCREEN);
	_delay_ms(10);
	
	number1=0,number2=0,modifier = 10,flag=0,operation = 't';
	input =NOTPRESSED;
	result =0;
 59a:	66 2d       	mov	r22, r6
 59c:	75 2d       	mov	r23, r5
 59e:	84 2d       	mov	r24, r4
 5a0:	93 2d       	mov	r25, r3
 5a2:	8c cf       	rjmp	.-232    	; 0x4bc <main+0x19a>
					LCD_send_cmd(CLRSCREEN);
					_delay_ms(300);
					goto location1;
				}
			
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	df 90       	pop	r13
 5b6:	cf 90       	pop	r12
 5b8:	bf 90       	pop	r11
 5ba:	af 90       	pop	r10
 5bc:	9f 90       	pop	r9
 5be:	8f 90       	pop	r8
 5c0:	7f 90       	pop	r7
 5c2:	6f 90       	pop	r6
 5c4:	5f 90       	pop	r5
 5c6:	4f 90       	pop	r4
 5c8:	3f 90       	pop	r3
 5ca:	2f 90       	pop	r2
 5cc:	08 95       	ret

000005ce <keypad_init>:
#include<util/delay.h>
#include "Keypad_driver.h"
#include "DIO.h"

void keypad_init(char portname)
{
 5ce:	cf 93       	push	r28
 5d0:	c8 2f       	mov	r28, r24
	DIO_vsetPINDir(portname,0,1);
 5d2:	41 e0       	ldi	r20, 0x01	; 1
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname,1,1);
 5da:	41 e0       	ldi	r20, 0x01	; 1
 5dc:	61 e0       	ldi	r22, 0x01	; 1
 5de:	8c 2f       	mov	r24, r28
 5e0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname,2,1);
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	62 e0       	ldi	r22, 0x02	; 2
 5e8:	8c 2f       	mov	r24, r28
 5ea:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname,3,1);
 5ee:	41 e0       	ldi	r20, 0x01	; 1
 5f0:	63 e0       	ldi	r22, 0x03	; 3
 5f2:	8c 2f       	mov	r24, r28
 5f4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname,4,0);
 5f8:	40 e0       	ldi	r20, 0x00	; 0
 5fa:	64 e0       	ldi	r22, 0x04	; 4
 5fc:	8c 2f       	mov	r24, r28
 5fe:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname,5,0);
 602:	40 e0       	ldi	r20, 0x00	; 0
 604:	65 e0       	ldi	r22, 0x05	; 5
 606:	8c 2f       	mov	r24, r28
 608:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname,6,0);
 60c:	40 e0       	ldi	r20, 0x00	; 0
 60e:	66 e0       	ldi	r22, 0x06	; 6
 610:	8c 2f       	mov	r24, r28
 612:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(portname,7,0);
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	67 e0       	ldi	r22, 0x07	; 7
 61a:	8c 2f       	mov	r24, r28
 61c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_write(portname,4,1);
 620:	41 e0       	ldi	r20, 0x01	; 1
 622:	64 e0       	ldi	r22, 0x04	; 4
 624:	8c 2f       	mov	r24, r28
 626:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	DIO_write(portname,5,1);
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	65 e0       	ldi	r22, 0x05	; 5
 62e:	8c 2f       	mov	r24, r28
 630:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	DIO_write(portname,6,1);
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	66 e0       	ldi	r22, 0x06	; 6
 638:	8c 2f       	mov	r24, r28
 63a:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	DIO_write(portname,7,1);
 63e:	41 e0       	ldi	r20, 0x01	; 1
 640:	67 e0       	ldi	r22, 0x07	; 7
 642:	8c 2f       	mov	r24, r28
 644:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	
}
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

0000064c <keypad_read>:

char keypad_read(char portname)
{
 64c:	df 92       	push	r13
 64e:	ef 92       	push	r14
 650:	ff 92       	push	r15
 652:	0f 93       	push	r16
 654:	1f 93       	push	r17
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	60 97       	sbiw	r28, 0x10	; 16
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	f8 94       	cli
 664:	de bf       	out	0x3e, r29	; 62
 666:	0f be       	out	0x3f, r0	; 63
 668:	cd bf       	out	0x3d, r28	; 61
 66a:	08 2f       	mov	r16, r24
	char returnvalue=NOTPRESSED,col,row,arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'o','0','=','+'}};
 66c:	80 e1       	ldi	r24, 0x10	; 16
 66e:	e0 e6       	ldi	r30, 0x60	; 96
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	de 01       	movw	r26, r28
 674:	11 96       	adiw	r26, 0x01	; 1
 676:	01 90       	ld	r0, Z+
 678:	0d 92       	st	X+, r0
 67a:	8a 95       	dec	r24
 67c:	e1 f7       	brne	.-8      	; 0x676 <keypad_read+0x2a>
 67e:	e1 2c       	mov	r14, r1
 680:	f1 2c       	mov	r15, r1
 682:	dd 24       	eor	r13, r13
 684:	da 94       	dec	r13
	
	for(row=0;row<=3;row++)
	{
		DIO_write(portname,0,1);
 686:	41 e0       	ldi	r20, 0x01	; 1
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	80 2f       	mov	r24, r16
 68c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write(portname,1,1);
 690:	41 e0       	ldi	r20, 0x01	; 1
 692:	61 e0       	ldi	r22, 0x01	; 1
 694:	80 2f       	mov	r24, r16
 696:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write(portname,2,1);
 69a:	41 e0       	ldi	r20, 0x01	; 1
 69c:	62 e0       	ldi	r22, 0x02	; 2
 69e:	80 2f       	mov	r24, r16
 6a0:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write(portname,3,1);
 6a4:	41 e0       	ldi	r20, 0x01	; 1
 6a6:	63 e0       	ldi	r22, 0x03	; 3
 6a8:	80 2f       	mov	r24, r16
 6aa:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		DIO_write(portname,row,0);
 6ae:	40 e0       	ldi	r20, 0x00	; 0
 6b0:	6e 2d       	mov	r22, r14
 6b2:	80 2f       	mov	r24, r16
 6b4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
		for(col= 0;col<=3;col++)
 6b8:	10 e0       	ldi	r17, 0x00	; 0
 6ba:	64 e0       	ldi	r22, 0x04	; 4
 6bc:	61 0f       	add	r22, r17
		{
			if(DIO_u8read(portname,col+4)==0)
 6be:	80 2f       	mov	r24, r16
 6c0:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8read>
 6c4:	81 11       	cpse	r24, r1
 6c6:	0f c0       	rjmp	.+30     	; 0x6e6 <keypad_read+0x9a>
			{
				returnvalue = arr[row][col];
 6c8:	f7 01       	movw	r30, r14
 6ca:	ee 0f       	add	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	ee 0f       	add	r30, r30
 6d0:	ff 1f       	adc	r31, r31
 6d2:	e1 0f       	add	r30, r17
 6d4:	f1 1d       	adc	r31, r1
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	8c 0f       	add	r24, r28
 6dc:	9d 1f       	adc	r25, r29
 6de:	e8 0f       	add	r30, r24
 6e0:	f9 1f       	adc	r31, r25
 6e2:	d0 80       	ld	r13, Z
				break;
 6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <keypad_read+0xa4>
			}
			if(0 == returnvalue)
 6e6:	dd 20       	and	r13, r13
 6e8:	19 f0       	breq	.+6      	; 0x6f0 <keypad_read+0xa4>
		DIO_write(portname,0,1);
		DIO_write(portname,1,1);
		DIO_write(portname,2,1);
		DIO_write(portname,3,1);
		DIO_write(portname,row,0);
		for(col= 0;col<=3;col++)
 6ea:	1f 5f       	subi	r17, 0xFF	; 255
 6ec:	14 30       	cpi	r17, 0x04	; 4
 6ee:	29 f7       	brne	.-54     	; 0x6ba <keypad_read+0x6e>
 6f0:	9f ef       	ldi	r25, 0xFF	; 255
 6f2:	e9 1a       	sub	r14, r25
 6f4:	f9 0a       	sbc	r15, r25

char keypad_read(char portname)
{
	char returnvalue=NOTPRESSED,col,row,arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'o','0','=','+'}};
	
	for(row=0;row<=3;row++)
 6f6:	84 e0       	ldi	r24, 0x04	; 4
 6f8:	e8 16       	cp	r14, r24
 6fa:	f1 04       	cpc	r15, r1
 6fc:	21 f6       	brne	.-120    	; 0x686 <keypad_read+0x3a>
			
		}
		
	}
	return returnvalue;
 6fe:	8d 2d       	mov	r24, r13
 700:	60 96       	adiw	r28, 0x10	; 16
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	1f 91       	pop	r17
 712:	0f 91       	pop	r16
 714:	ff 90       	pop	r15
 716:	ef 90       	pop	r14
 718:	df 90       	pop	r13
 71a:	08 95       	ret

0000071c <LCD_send_falling_edge>:
		++string;
	}
}
void LCD_send_falling_edge()
{
	DIO_write('B',EN,1);
 71c:	41 e0       	ldi	r20, 0x01	; 1
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	82 e4       	ldi	r24, 0x42	; 66
 722:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 726:	8f e9       	ldi	r24, 0x9F	; 159
 728:	9f e0       	ldi	r25, 0x0F	; 15
 72a:	01 97       	sbiw	r24, 0x01	; 1
 72c:	f1 f7       	brne	.-4      	; 0x72a <LCD_send_falling_edge+0xe>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <LCD_send_falling_edge+0x14>
 730:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 732:	40 e0       	ldi	r20, 0x00	; 0
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	82 e4       	ldi	r24, 0x42	; 66
 738:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
 73c:	8f e9       	ldi	r24, 0x9F	; 159
 73e:	9f e0       	ldi	r25, 0x0F	; 15
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	f1 f7       	brne	.-4      	; 0x740 <LCD_send_falling_edge+0x24>
 744:	00 c0       	rjmp	.+0      	; 0x746 <LCD_send_falling_edge+0x2a>
 746:	00 00       	nop
 748:	08 95       	ret

0000074a <LCD_send_cmd>:
	_delay_ms(10);
		
}

void LCD_send_cmd(char command)
{
 74a:	cf 93       	push	r28
 74c:	c8 2f       	mov	r28, r24
	DIO_write('B',RS,0);
 74e:	40 e0       	ldi	r20, 0x00	; 0
 750:	62 e0       	ldi	r22, 0x02	; 2
 752:	82 e4       	ldi	r24, 0x42	; 66
 754:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	DIO_write_port('A',command);
 758:	6c 2f       	mov	r22, r28
 75a:	81 e4       	ldi	r24, 0x41	; 65
 75c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_write_port>
	LCD_send_falling_edge();
 760:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_send_falling_edge>
 764:	8f ec       	ldi	r24, 0xCF	; 207
 766:	97 e0       	ldi	r25, 0x07	; 7
 768:	01 97       	sbiw	r24, 0x01	; 1
 76a:	f1 f7       	brne	.-4      	; 0x768 <LCD_send_cmd+0x1e>
 76c:	00 c0       	rjmp	.+0      	; 0x76e <LCD_send_cmd+0x24>
 76e:	00 00       	nop
	_delay_ms(1);
	
}
 770:	cf 91       	pop	r28
 772:	08 95       	ret

00000774 <LCD_init>:
 774:	2f ef       	ldi	r18, 0xFF	; 255
 776:	81 ee       	ldi	r24, 0xE1	; 225
 778:	94 e0       	ldi	r25, 0x04	; 4
 77a:	21 50       	subi	r18, 0x01	; 1
 77c:	80 40       	sbci	r24, 0x00	; 0
 77e:	90 40       	sbci	r25, 0x00	; 0
 780:	e1 f7       	brne	.-8      	; 0x77a <LCD_init+0x6>
 782:	00 c0       	rjmp	.+0      	; 0x784 <LCD_init+0x10>
 784:	00 00       	nop
#define F_CPU 8000000UL
#include<util/delay.h>
void LCD_init()
{
	_delay_ms(200);
	DIO_vsetPINDir('A',0,1);
 786:	41 e0       	ldi	r20, 0x01	; 1
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	81 e4       	ldi	r24, 0x41	; 65
 78c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
 790:	41 e0       	ldi	r20, 0x01	; 1
 792:	61 e0       	ldi	r22, 0x01	; 1
 794:	81 e4       	ldi	r24, 0x41	; 65
 796:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
 79a:	41 e0       	ldi	r20, 0x01	; 1
 79c:	62 e0       	ldi	r22, 0x02	; 2
 79e:	81 e4       	ldi	r24, 0x41	; 65
 7a0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
 7a4:	41 e0       	ldi	r20, 0x01	; 1
 7a6:	63 e0       	ldi	r22, 0x03	; 3
 7a8:	81 e4       	ldi	r24, 0x41	; 65
 7aa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
 7ae:	41 e0       	ldi	r20, 0x01	; 1
 7b0:	64 e0       	ldi	r22, 0x04	; 4
 7b2:	81 e4       	ldi	r24, 0x41	; 65
 7b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	65 e0       	ldi	r22, 0x05	; 5
 7bc:	81 e4       	ldi	r24, 0x41	; 65
 7be:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 7c2:	41 e0       	ldi	r20, 0x01	; 1
 7c4:	66 e0       	ldi	r22, 0x06	; 6
 7c6:	81 e4       	ldi	r24, 0x41	; 65
 7c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 7cc:	41 e0       	ldi	r20, 0x01	; 1
 7ce:	67 e0       	ldi	r22, 0x07	; 7
 7d0:	81 e4       	ldi	r24, 0x41	; 65
 7d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	
	DIO_vsetPINDir('B',RW,1);
 7d6:	41 e0       	ldi	r20, 0x01	; 1
 7d8:	61 e0       	ldi	r22, 0x01	; 1
 7da:	82 e4       	ldi	r24, 0x42	; 66
 7dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	62 e0       	ldi	r22, 0x02	; 2
 7e4:	82 e4       	ldi	r24, 0x42	; 66
 7e6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 7ea:	41 e0       	ldi	r20, 0x01	; 1
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	82 e4       	ldi	r24, 0x42	; 66
 7f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	LCD_send_cmd(EIGHT_BIT_MODE);
 7f4:	88 e3       	ldi	r24, 0x38	; 56
 7f6:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_send_cmd>
	LCD_send_cmd(CURSOR_OFF_DISPLAY_ON);
 7fa:	8c e0       	ldi	r24, 0x0C	; 12
 7fc:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_send_cmd>
	LCD_send_cmd(ENTRY_MODE);
 800:	86 e0       	ldi	r24, 0x06	; 6
 802:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_send_cmd>
	LCD_send_cmd(CLRSCREEN);
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	0e 94 a5 03 	call	0x74a	; 0x74a <LCD_send_cmd>
 80c:	8f e1       	ldi	r24, 0x1F	; 31
 80e:	9e e4       	ldi	r25, 0x4E	; 78
 810:	01 97       	sbiw	r24, 0x01	; 1
 812:	f1 f7       	brne	.-4      	; 0x810 <LCD_init+0x9c>
 814:	00 c0       	rjmp	.+0      	; 0x816 <LCD_init+0xa2>
 816:	00 00       	nop
 818:	08 95       	ret

0000081a <LCD_send_char>:
	{
		LCD_send_cmd(RETURN_HOME);
	}
}
void LCD_send_char(char character)
{
 81a:	cf 93       	push	r28
 81c:	c8 2f       	mov	r28, r24
	DIO_write('B',RS,1);
 81e:	41 e0       	ldi	r20, 0x01	; 1
 820:	62 e0       	ldi	r22, 0x02	; 2
 822:	82 e4       	ldi	r24, 0x42	; 66
 824:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_write>
	DIO_write_port('A',character);
 828:	6c 2f       	mov	r22, r28
 82a:	81 e4       	ldi	r24, 0x41	; 65
 82c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_write_port>
	LCD_send_falling_edge();
 830:	0e 94 8e 03 	call	0x71c	; 0x71c <LCD_send_falling_edge>
}
 834:	cf 91       	pop	r28
 836:	08 95       	ret

00000838 <__udivmodqi4>:
 838:	99 1b       	sub	r25, r25
 83a:	79 e0       	ldi	r23, 0x09	; 9
 83c:	04 c0       	rjmp	.+8      	; 0x846 <__udivmodqi4_ep>

0000083e <__udivmodqi4_loop>:
 83e:	99 1f       	adc	r25, r25
 840:	96 17       	cp	r25, r22
 842:	08 f0       	brcs	.+2      	; 0x846 <__udivmodqi4_ep>
 844:	96 1b       	sub	r25, r22

00000846 <__udivmodqi4_ep>:
 846:	88 1f       	adc	r24, r24
 848:	7a 95       	dec	r23
 84a:	c9 f7       	brne	.-14     	; 0x83e <__udivmodqi4_loop>
 84c:	80 95       	com	r24
 84e:	08 95       	ret

00000850 <__divmodsi4>:
 850:	05 2e       	mov	r0, r21
 852:	97 fb       	bst	r25, 7
 854:	1e f4       	brtc	.+6      	; 0x85c <__divmodsi4+0xc>
 856:	00 94       	com	r0
 858:	0e 94 3f 04 	call	0x87e	; 0x87e <__negsi2>
 85c:	57 fd       	sbrc	r21, 7
 85e:	07 d0       	rcall	.+14     	; 0x86e <__divmodsi4_neg2>
 860:	0e 94 47 04 	call	0x88e	; 0x88e <__udivmodsi4>
 864:	07 fc       	sbrc	r0, 7
 866:	03 d0       	rcall	.+6      	; 0x86e <__divmodsi4_neg2>
 868:	4e f4       	brtc	.+18     	; 0x87c <__divmodsi4_exit>
 86a:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__negsi2>

0000086e <__divmodsi4_neg2>:
 86e:	50 95       	com	r21
 870:	40 95       	com	r20
 872:	30 95       	com	r19
 874:	21 95       	neg	r18
 876:	3f 4f       	sbci	r19, 0xFF	; 255
 878:	4f 4f       	sbci	r20, 0xFF	; 255
 87a:	5f 4f       	sbci	r21, 0xFF	; 255

0000087c <__divmodsi4_exit>:
 87c:	08 95       	ret

0000087e <__negsi2>:
 87e:	90 95       	com	r25
 880:	80 95       	com	r24
 882:	70 95       	com	r23
 884:	61 95       	neg	r22
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	8f 4f       	sbci	r24, 0xFF	; 255
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	08 95       	ret

0000088e <__udivmodsi4>:
 88e:	a1 e2       	ldi	r26, 0x21	; 33
 890:	1a 2e       	mov	r1, r26
 892:	aa 1b       	sub	r26, r26
 894:	bb 1b       	sub	r27, r27
 896:	fd 01       	movw	r30, r26
 898:	0d c0       	rjmp	.+26     	; 0x8b4 <__udivmodsi4_ep>

0000089a <__udivmodsi4_loop>:
 89a:	aa 1f       	adc	r26, r26
 89c:	bb 1f       	adc	r27, r27
 89e:	ee 1f       	adc	r30, r30
 8a0:	ff 1f       	adc	r31, r31
 8a2:	a2 17       	cp	r26, r18
 8a4:	b3 07       	cpc	r27, r19
 8a6:	e4 07       	cpc	r30, r20
 8a8:	f5 07       	cpc	r31, r21
 8aa:	20 f0       	brcs	.+8      	; 0x8b4 <__udivmodsi4_ep>
 8ac:	a2 1b       	sub	r26, r18
 8ae:	b3 0b       	sbc	r27, r19
 8b0:	e4 0b       	sbc	r30, r20
 8b2:	f5 0b       	sbc	r31, r21

000008b4 <__udivmodsi4_ep>:
 8b4:	66 1f       	adc	r22, r22
 8b6:	77 1f       	adc	r23, r23
 8b8:	88 1f       	adc	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	1a 94       	dec	r1
 8be:	69 f7       	brne	.-38     	; 0x89a <__udivmodsi4_loop>
 8c0:	60 95       	com	r22
 8c2:	70 95       	com	r23
 8c4:	80 95       	com	r24
 8c6:	90 95       	com	r25
 8c8:	9b 01       	movw	r18, r22
 8ca:	ac 01       	movw	r20, r24
 8cc:	bd 01       	movw	r22, r26
 8ce:	cf 01       	movw	r24, r30
 8d0:	08 95       	ret

000008d2 <_exit>:
 8d2:	f8 94       	cli

000008d4 <__stop_program>:
 8d4:	ff cf       	rjmp	.-2      	; 0x8d4 <__stop_program>
